---
import { createAdminClient } from '../../lib/supabase';

const cookies = Astro.cookies;
const adminSession = cookies.get('admin_session');

// Check if already logged in
if (!adminSession?.value) {
  // Show login form
  const error = Astro.url.searchParams.get('error');
  ---
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login - AI News Blog</title>
    <link rel="stylesheet" href="/src/styles/global.css">
  </head>
  <body class="bg-gray-100">
    <div class="min-h-screen flex items-center justify-center px-4">
      <div class="bg-white rounded-lg shadow-md p-8 w-full max-w-md">
        <h1 class="text-2xl font-bold text-gray-900 mb-6">Admin Login</h1>
        
        {error && (
          <div class="mb-4 p-4 bg-red-100 text-red-800 rounded-lg">
            Invalid password
          </div>
        )}
        
        <form action="/api/admin/login" method="POST" class="space-y-4">
          <div>
            <label for="password" class="block text-sm font-medium text-gray-700 mb-1">
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              required
              autofocus
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <button
            type="submit"
            class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            Login
          </button>
        </form>
      </div>
    </div>
  </body>
  </html>
  ---
  return;
}

// User is logged in, show admin dashboard
const supabase = createAdminClient();

// Get stats
const { data: digests } = await supabase.from('digests').select('*').order('created_at', { ascending: false });
const { data: comments } = await supabase.from('comments').select('*').eq('approved', false).order('created_at', { ascending: false });
const { data: subscribers } = await supabase.from('subscribers').select('*').order('subscribed_at', { ascending: false });

const publishedCount = digests?.filter(d => d.status === 'published').length || 0;
const draftCount = digests?.filter(d => d.status === 'draft').length || 0;
const pendingCommentsCount = comments?.length || 0;
const subscribersCount = subscribers?.filter(s => s.verified).length || 0;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard - AI News Blog</title>
  <link rel="stylesheet" href="/src/styles/global.css">
</head>
<body class="bg-gray-50">
  <div class="min-h-screen">
    <nav class="bg-white shadow-md">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <h1 class="text-xl font-bold text-gray-900">Admin Dashboard</h1>
          <div class="flex gap-4">
            <a href="/" class="text-blue-600 hover:text-blue-800">View Site</a>
            <form action="/api/admin/logout" method="POST">
              <button type="submit" class="text-red-600 hover:text-red-800">Logout</button>
            </form>
          </div>
        </div>
      </div>
    </nav>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Stats Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-sm font-medium text-gray-600 mb-2">Published Digests</h3>
          <p class="text-3xl font-bold text-gray-900">{publishedCount}</p>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-sm font-medium text-gray-600 mb-2">Draft Digests</h3>
          <p class="text-3xl font-bold text-gray-900">{draftCount}</p>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-sm font-medium text-gray-600 mb-2">Pending Comments</h3>
          <p class="text-3xl font-bold text-orange-600">{pendingCommentsCount}</p>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-sm font-medium text-gray-600 mb-2">Subscribers</h3>
          <p class="text-3xl font-bold text-gray-900">{subscribersCount}</p>
        </div>
      </div>

      <!-- Tabs -->
      <div class="bg-white rounded-lg shadow">
        <div class="border-b border-gray-200">
          <nav class="flex space-x-4 px-6" id="tabs">
            <button class="tab-btn px-4 py-4 text-sm font-medium border-b-2 border-blue-600 text-blue-600" data-tab="digests">
              Digests
            </button>
            <button class="tab-btn px-4 py-4 text-sm font-medium border-b-2 border-transparent text-gray-600 hover:text-gray-900" data-tab="comments">
              Comments ({pendingCommentsCount})
            </button>
            <button class="tab-btn px-4 py-4 text-sm font-medium border-b-2 border-transparent text-gray-600 hover:text-gray-900" data-tab="subscribers">
              Subscribers
            </button>
          </nav>
        </div>

        <!-- Digests Tab -->
        <div id="digests-tab" class="tab-content p-6">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-xl font-bold text-gray-900">All Digests</h2>
            <a href="/admin/digests/new" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
              Create New Digest
            </a>
          </div>
          
          <div class="space-y-4">
            {digests && digests.length > 0 ? digests.map(digest => (
              <div class="border border-gray-200 rounded-lg p-4 flex justify-between items-center">
                <div>
                  <h3 class="font-semibold text-gray-900">{digest.title}</h3>
                  <div class="flex gap-4 text-sm text-gray-600 mt-1">
                    <span class={digest.status === 'published' ? 'text-green-600' : 'text-gray-600'}>
                      {digest.status === 'published' ? '✓ Published' : '○ Draft'}
                    </span>
                    <span>{digest.category}</span>
                    <span>{new Date(digest.published_date).toLocaleDateString()}</span>
                  </div>
                </div>
                <div class="flex gap-2">
                  <a href={`/digest/${digest.id}`} class="px-3 py-1 text-blue-600 hover:bg-blue-50 rounded">View</a>
                  <a href={`/admin/digests/${digest.id}/edit`} class="px-3 py-1 text-gray-600 hover:bg-gray-50 rounded">Edit</a>
                </div>
              </div>
            )) : (
              <p class="text-gray-600">No digests yet.</p>
            )}
          </div>
        </div>

        <!-- Comments Tab -->
        <div id="comments-tab" class="tab-content hidden p-6">
          <h2 class="text-xl font-bold text-gray-900 mb-6">Pending Comments</h2>
          <div class="space-y-4">
            {comments && comments.length > 0 ? comments.map(comment => (
              <div class="border border-gray-200 rounded-lg p-4">
                <div class="flex justify-between items-start mb-2">
                  <div>
                    <span class="font-semibold">{comment.author_name}</span>
                    <span class="text-gray-500 text-sm ml-2">{new Date(comment.created_at).toLocaleDateString()}</span>
                  </div>
                  <div class="flex gap-2">
                    <button 
                      onclick={`approveComment('${comment.id}')`}
                      class="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm"
                    >
                      Approve
                    </button>
                    <button 
                      onclick={`deleteComment('${comment.id}')`}
                      class="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-sm"
                    >
                      Delete
                    </button>
                  </div>
                </div>
                <p class="text-gray-700">{comment.content}</p>
              </div>
            )) : (
              <p class="text-gray-600">No pending comments.</p>
            )}
          </div>
        </div>

        <!-- Subscribers Tab -->
        <div id="subscribers-tab" class="tab-content hidden p-6">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-xl font-bold text-gray-900">Subscribers</h2>
            <button class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
              Export CSV
            </button>
          </div>
          <div class="space-y-2">
            {subscribers && subscribers.length > 0 ? subscribers.map(sub => (
              <div class="border border-gray-200 rounded-lg p-3 flex justify-between items-center">
                <div>
                  <span class="font-medium">{sub.email}</span>
                  <span class={sub.verified ? 'ml-2 text-green-600 text-sm' : 'ml-2 text-gray-500 text-sm'}>
                    {sub.verified ? '✓ Verified' : '○ Pending'}
                  </span>
                </div>
                <span class="text-sm text-gray-600">{new Date(sub.subscribed_at).toLocaleDateString()}</span>
              </div>
            )) : (
              <p class="text-gray-600">No subscribers yet.</p>
            )}
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Tab switching
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const tabName = btn.dataset.tab;
        
        // Update button styles
        tabBtns.forEach(b => {
          b.classList.remove('border-blue-600', 'text-blue-600');
          b.classList.add('border-transparent', 'text-gray-600');
        });
        btn.classList.add('border-blue-600', 'text-blue-600');
        btn.classList.remove('border-transparent', 'text-gray-600');
        
        // Update content visibility
        tabContents.forEach(content => content.classList.add('hidden'));
        document.getElementById(`${tabName}-tab`).classList.remove('hidden');
      });
    });

    // Comment moderation
    async function approveComment(id) {
      if (confirm('Approve this comment?')) {
        // TODO: Implement API call
        alert('Comment approved! (API not yet implemented)');
      }
    }

    async function deleteComment(id) {
      if (confirm('Delete this comment permanently?')) {
        // TODO: Implement API call
        alert('Comment deleted! (API not yet implemented)');
      }
    }
  </script>
</body>
</html>

